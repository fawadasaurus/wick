name: mono-workflow
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+" # matches 0.1.0, 0.2.1, etc.
  schedule:
    - cron: "0 1 * * *" # 1am UTC
  pull_request:
    branches:
      - main
permissions:
  contents: write
  packages: write
  actions: read
jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - name: Update Nightly Tag
        if: github.event_name == 'schedule'
        uses: richardsimko/update-tag@v1
        with:
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout code
        if: startsWith(github.ref, 'refs/tags/') == true
        uses: actions/checkout@v3
      - name: Search for version
        if: startsWith(github.ref, 'refs/tags/') == true
        run: |
          cd crates/bins/wick
          if grep -q "version = \"${{ env.GITHUB_REF }}\"" Cargo.toml; then
            echo "Match found!"
          else
            echo "No match found."
            exit 1
          fi
        env:
          GITHUB_REF: ${{ github.ref_name }}
  test:
    needs: tag
    if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/') == true
    runs-on: ${{ matrix.config.os }}
    env:
      SCCACHE_AZURE_BLOB_CONTAINER: ${{ secrets.SCCACHE_AZURE_BLOB_CONTAINER }}
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
      SCCACHE_AZURE_KEY_PREFIX: "wick-github-actions-test"
      RUSTC_WRAPPER: "sccache"
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              name: "linux",
              arch: "amd64",
              target: "x86_64-unknown-linux-gnu",
            }
          # - {
          #     os: "ubuntu-latest",
          #     name: "linux",
          #     target: "aarch64-unknown-linux-gnu",
          #     arch: "aarch64",
          #   }
          # - {
          #     os: "macos-latest",
          #     name: "macos",
          #     target: "x86_64-apple-darwin",
          #     arch: "amd64",
          #   }
          # - {
          #     os: "macos-latest",
          #     name: "macos",
          #     target: "aarch64-apple-darwin",
          #     arch: "aarch64",
          #   }
          # - {
          #     os: "ubuntu-latest",
          #     name: "win",
          #     target: "x86_64-pc-windows-gnu",
          #     arch: "amd64",
          #   }
    steps:
      - name: make space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions/checkout@v3
      - name: install protobuf
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: setup for cross-compiled linux aarch64 build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: setup for cross-compiled windows build
        if: matrix.config.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt update
          sudo apt install mingw-w64
          echo '[target.x86_64-pc-windows-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "x86_64-w64-mingw32-gcc"' >> ${HOME}/.cargo/config.toml
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/x86_64-w64-mingw32" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-w64-mingw32/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: Install sccache (ubuntu-latest)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          mkdir -p $HOME/.local/bin
          curl -L "https://github.com/mozilla/sccache/releases/download/v0.3.3/sccache-v0.3.3-x86_64-unknown-linux-musl.tar.gz" | tar xz
          mv -f sccache-v0.3.3-x86_64-unknown-linux-musl/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-latest)
        if: matrix.config.os == 'macos-latest'
        run: |
          mkdir -p $HOME/.local/bin
          curl -L "https://github.com/mozilla/sccache/releases/download/v0.3.3/sccache-v0.3.3-x86_64-apple-darwin.tar.gz" | tar xz
          mv -f sccache-v0.3.3-x86_64-apple-darwin/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.config.target }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.68.0
          default: true
          target: ${{ matrix.config.target }}
          components: rustfmt, clippy, rustc, cargo, rust-docs, rust-std
      - name: "rustup updates"
        run: |
          rustup target add wasm32-unknown-unknown wasm32-wasi
          cargo install tomlq cargo-deny just
      #Updating rustup updates means that the github cache needs to be manually deleted.
      - name: Run just ci-tests
        id: just-ci-test
        run: |
          just ci-tests
  build:
    needs: tag
    runs-on: ${{ matrix.config.os }}
    if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/') == true
    env:
      SCCACHE_AZURE_BLOB_CONTAINER: ${{ secrets.SCCACHE_AZURE_BLOB_CONTAINER }}
      SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
      SCCACHE_AZURE_KEY_PREFIX: "wick-github-actions"
      RUSTC_WRAPPER: "sccache"
      CARGO_PROFILE_RELEASE_DEBUG: "0" # https://doc.rust-lang.org/cargo/reference/profiles.html#debug
      CARGO_INCREMENTAL: "true" # https://doc.rust-lang.org/cargo/reference/profiles.html#incremental
      CARGO_PROFILE_RELEASE_LTO: "true" # https://doc.rust-lang.org/cargo/reference/profiles.html#lto
      CARGO_PROFILE_RELEASE_OPT_LEVEL: "3" # https://doc.rust-lang.org/cargo/reference/profiles.html#opt-level
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: "1" # https://doc.rust-lang.org/cargo/reference/profiles.html#codegen-units
      CARGO_PROFILE_RELEASE_STRIP: "true" # https://doc.rust-lang.org/cargo/reference/unstable.html#profile-strip-option
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              name: "linux",
              arch: "amd64",
              target: "x86_64-unknown-linux-gnu",
            }
          - {
              os: "ubuntu-latest",
              name: "linux",
              target: "aarch64-unknown-linux-gnu",
              arch: "aarch64",
            }
#           - {
#               os: "macos-latest",
#               name: "macos",
#               target: "x86_64-apple-darwin",
#               arch: "amd64",
#             }
#           - {
#               os: "macos-latest",
#               name: "macos",
#               target: "aarch64-apple-darwin",
#               arch: "aarch64",
#             }
          # - {
          #     os: "ubuntu-latest",
          #     name: "win",
          #     target: "x86_64-pc-windows-gnu",
          #     arch: "amd64",
          #   }
    steps:
      - uses: actions/checkout@v3
      - name: install protobuf
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: setup for cross-compiled linux aarch64 build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: setup for cross-compiled windows build
        if: matrix.config.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt update
          sudo apt install mingw-w64
          echo '[target.x86_64-pc-windows-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "x86_64-w64-mingw32-gcc"' >> ${HOME}/.cargo/config.toml
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/x86_64-w64-mingw32" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-w64-mingw32/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: Install sccache (ubuntu-latest)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          mkdir -p $HOME/.local/bin
          curl -L "https://github.com/mozilla/sccache/releases/download/v0.3.3/sccache-v0.3.3-x86_64-unknown-linux-musl.tar.gz" | tar xz
          mv -f sccache-v0.3.3-x86_64-unknown-linux-musl/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install sccache (macos-latest)
        if: matrix.config.os == 'macos-latest'
        run: |
          mkdir -p $HOME/.local/bin
          curl -L "https://github.com/mozilla/sccache/releases/download/v0.3.3/sccache-v0.3.3-x86_64-apple-darwin.tar.gz" | tar xz
          mv -f sccache-v0.3.3-x86_64-apple-darwin/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.config.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.68.0
          default: true
          target: ${{ matrix.config.target }}
          components: rustfmt, clippy, rustc, cargo, rust-docs, rust-std
      - name: "rustup updates"
        run: |
          rustup target add wasm32-unknown-unknown wasm32-wasi
          cargo install tomlq cargo-deny just
      #Updating rustup updates means that the github cache needs to be manually deleted.
      - name: "build binary"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release -p wick --target=${{ matrix.config.target }} --features openssl/vendored
      - name: package release assets
        if: matrix.config.target != 'x86_64-pc-windows-gnu'
        run: |
          mkdir -p _dist
          cp README.md LICENSE target/${{ matrix.config.target }}/release/wick _dist/
          cd _dist
          tar czf wick-${{ matrix.config.name }}-${{ matrix.config.arch }}.tar.gz README.md LICENSE wick
      - name: Upload artifacts
        if: matrix.config.target != 'x86_64-pc-windows-gnu'
        uses: actions/upload-artifact@v2
        with:
          name: wick-${{ matrix.config.name }}-${{ matrix.config.arch }}.tar.gz
          path: _dist/wick-${{ matrix.config.name }}-${{ matrix.config.arch }}.tar.gz
      - name: package release assets (windows)
        if: matrix.config.target == 'x86_64-pc-windows-gnu'
        shell: bash
        run: |
          mkdir -p _dist
          cp README.md LICENSE target/${{ matrix.config.target }}/release/wick.exe _dist/
          cd _dist
          7z a -tzip wick-${{ matrix.config.name }}-${{ matrix.config.arch }}.zip README.md LICENSE wick.exe
      - name: Upload artifacts (windows)
        if: matrix.config.target == 'x86_64-pc-windows-gnu'
        uses: actions/upload-artifact@v2
        with:
          name: wick-${{ matrix.config.name }}-${{ matrix.config.arch }}.zip
          path: _dist/wick-${{ matrix.config.name }}-${{ matrix.config.arch }}.zip
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/') == true
    needs: [test, build]
    steps:
      - uses: actions/checkout@v3
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Download artifacts into a single directory
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p _dist
          ARTIFACTS_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[].archive_download_url')

          # Print the URLs of the artifacts
          echo "Downloading artifacts from the following URLs:"
          echo "$ARTIFACTS_URL"

          for url in $ARTIFACTS_URL; do
            curl -L -H "Authorization: token $GITHUB_TOKEN" $url -o artifact.zip
            
            echo "Downloaded artifact:"
            ls -la artifact.zip

            # Print the contents of the downloaded archive file
            echo "Contents of artifact.zip:"
            unzip -l artifact.zip

            unzip -j artifact.zip -d _dist
            rm artifact.zip
          done

          #Copy the schema manifest into the dist directory
          cp crates/wick/wick-config/json-schema/manifest.json _dist/schema.json

          # Print the contents of the _dist directory
          echo "Contents of _dist directory:"
          ls -la _dist
      - name: upload release assets (tag)
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.ref, 'refs/tags/') == true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _dist/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: upload release assets (nightly)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _dist/*
          tag: nightly
          overwrite: true
          file_glob: true
      - name: ghcr login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.nightly
          push: true
          tags: ghcr.io/fawadasaurus/wick:nightly
          platforms: linux/amd64,linux/arm64
      - name: build and push
        uses: docker/build-push-action@v2
        if: startsWith(github.ref, 'refs/tags/') == true
        with:
          context: .
          file: ./docker/Dockerfile.latest
          push: true
          tags: ghcr.io/fawadasaurus/wick:latest, ghcr.io/fawadasaurus/wick:${{ inputs.version }}
          platforms: linux/amd64,linux/arm64
